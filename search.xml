<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[将默认Terminal换成iTerm2]]></title>
    <url>%2F2019%2F02%2F27%2F%E5%B0%86%E9%BB%98%E8%AE%A4Terminal%E6%8D%A2%E6%88%90iTerm2%2F</url>
    <content type="text"><![CDATA[感谢Stuart Ryan的脚本 iTerm 3.1.1 以上的脚本123456789101112131415161718192021222324252627282930313233343536373839404142434445-- This is v0.7 of the custom script for AlfredApp for iTerm 3.1.1+-- created by Sinan Eldem www.sinaneldem.com.tron alfred_script(q) if application "iTerm2" is running or application "iTerm" is running then run script " on run &#123;q&#125; tell application \"iTerm\" activate try select first window set onlywindow to true on error create window with default profile select first window set onlywindow to true end try tell the first window if onlywindow is false then create tab with default profile end if tell current session to write text q end tell end tell end run " with parameters &#123;q&#125; else run script " on run &#123;q&#125; tell application \"iTerm\" activate try select first window on error create window with default profile select first window end try tell the first window tell current session to write text q end tell end tell end run " with parameters &#123;q&#125; end ifend alfred_script]]></content>
      <categories>
        <category>Mac</category>
        <category>软件</category>
        <category>Alfred</category>
      </categories>
      <tags>
        <tag>alfred</tag>
        <tag>iTerm2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker-composer + jenkins + gitlab]]></title>
    <url>%2F2018%2F12%2F04%2Fdocker-composer%20%2B%20jenkins%20%2B%20gitlab%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930######### install docker ##########sudo yum install -y yum-utils device-mapper-persistent-data lvm2sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.reposudo yum-config-manager --enable docker-ce-edgesudo yum-config-manager --enable docker-ce-testsudo yum-config-manager --disable docker-ce-edgesudo yum install docker-ceservice start docker######### install docker-compose ##########sudo curl -L "https://github.com/docker/compose/releases/download/1.23.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose######### gitlab + jenkins ##########vi .env ## edit GITLAB_HOSTvi docker-compose.ymldocker-compose build &amp;&amp; docker-compose up -d######### ADL project migration ########## sync 91ctf and f_xpro_adl branchyum install -y gitgit config user.name "maple"git config user.email "summerweiace@163.com"git remore add vpn ssh://git@192.168.1.187:10022/php/ADL.gitgit push vpn --mirror# 配置git-ssh# 上传本地开发的公钥 和 jenkins的公钥(需要进入jenkins容器内，以jenkins的用户生成) jeninks 配置自动化部署 jeninks配置安装插件 Build Authorization Token Root Plugin Git Parameter Plug-In Gitlab Authentication plugin Gitlab Hook Plugin GitLab Plugin Publish Over SSH系统配置 项目配置 issue No chain/target/match by that name.重启docker服务 ssh同步代码实效开放10022端口semanage port -l | grep sshsemanage port -a -t ssh_port_t -p tcp 10022semanage port -l | grep sshsystemctl restart sshd.service jenkins 启动失败docker logs Hook execution failed: execution expired进入gitlab的容器，尝试curl hook url,若不行说明gitlab 访问不到jenkins12# 查看jenkins容器内部的ipdocker inspect -f '&#123;&#123;.Name&#125;&#125; - &#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;' $(docker ps -aq) | grep jenkins Hook url: http://{$jenkins容器内部的ip}:{$jenkins容器内部的端口}/buildByToken/build?job={$job}&amp;token={$token} 附件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#docker-compose.ymlversion: '2'services: redis: restart: always image: sameersbn/redis:latest container_name: gitlab-redis command: - --loglevel warning volumes: - ./redis:/var/lib/redis:Z # Gitlab - GitLab is open source software to collaborate on code postgresql: restart: always image: sameersbn/postgresql:9.6-2 container_name: gitlab-postgresql ports: - "5432:5432" volumes: - ./postgresql/data:/var/lib/postgresql:Z environment: - DB_USER=gitlab - DB_PASS=password - DB_NAME=gitlabhq_production - DB_EXTENSION=pg_trgm gitlab: image: sameersbn/gitlab:10.3.3 container_name: gitlab ports: - "10080:80" - "10022:22" volumes: - ./gitlab/data:/home/git/data:Z - ./gitlab/logs:/var/log/gitlab:Z depends_on: - redis - postgresql env_file: - .env jenkins: restart: "no" image: jenkins/jenkins:lts container_name: jenkins ports: - "8888:8080" - "50000:50000" volumes: - ./jenkins:/var/jenkins_home 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116# .envDEBUG=falseDB_ADAPTER=postgresqlDB_HOST=postgresqlDB_PORT=5432DB_USER=gitlabDB_PASS=passwordDB_NAME=gitlabhq_productionREDIS_HOST=redisREDIS_PORT=6379TZ=Asia/ShanghaiGITLAB_TIMEZONE=BeijingGITLAB_HTTPS=falseSSL_SELF_SIGNED=falseGITLAB_HOST=localhostGITLAB_PORT=10080GITLAB_SSH_PORT=10022GITLAB_RELATIVE_URL_ROOT=GITLAB_SECRETS_DB_KEY_BASE=base64:wJrklh4TJAwSUIxOAPagkPWzQgLSoZ+lekE3ClUkfg0=GITLAB_SECRETS_SECRET_KEY_BASE=base64:vSHULhdG2YK7ZU33iepRHKmxYxbxxgNPCRQaotGG5YE=GITLAB_SECRETS_OTP_KEY_BASE=base64:dg2lVNcO84EtV+Cjy9wZIie9OSjQLR6hPqJqRp/E/e4=GITLAB_ROOT_PASSWORD=GITLAB_ROOT_EMAIL=GITLAB_NOTIFY_ON_BROKEN_BUILDS=trueGITLAB_NOTIFY_PUSHER=falseGITLAB_EMAIL=notifications@example.comGITLAB_EMAIL_REPLY_TO=noreply@example.comGITLAB_INCOMING_EMAIL_ADDRESS=reply@example.comGITLAB_BACKUP_SCHEDULE=dailyGITLAB_BACKUP_TIME=01:00SMTP_ENABLED=falseSMTP_DOMAIN=www.example.comSMTP_HOST=smtp.gmail.comSMTP_PORT=587SMTP_USER=mailer@example.comSMTP_PASS=passwordSMTP_STARTTLS=trueSMTP_AUTHENTICATION=loginIMAP_ENABLED=falseIMAP_HOST=imap.gmail.comIMAP_PORT=993IMAP_USER=mailer@example.comIMAP_PASS=passwordIMAP_SSL=trueIMAP_STARTTLS=falseOAUTH_ENABLED=falseOAUTH_AUTO_SIGN_IN_WITH_PROVIDER=OAUTH_ALLOW_SSO=OAUTH_BLOCK_AUTO_CREATED_USERS=trueOAUTH_AUTO_LINK_LDAP_USER=falseOAUTH_AUTO_LINK_SAML_USER=falseOAUTH_EXTERNAL_PROVIDERS=OAUTH_CAS3_LABEL=cas3OAUTH_CAS3_SERVER=OAUTH_CAS3_DISABLE_SSL_VERIFICATION=falseOAUTH_CAS3_LOGIN_URL=/cas/loginOAUTH_CAS3_VALIDATE_URL=/cas/p3/serviceValidateOAUTH_CAS3_LOGOUT_URL=/cas/logoutOAUTH_GOOGLE_API_KEY=OAUTH_GOOGLE_APP_SECRET=OAUTH_GOOGLE_RESTRICT_DOMAIN=OAUTH_FACEBOOK_API_KEY=OAUTH_FACEBOOK_APP_SECRET=OAUTH_TWITTER_API_KEY=OAUTH_TWITTER_APP_SECRET=OAUTH_GITHUB_API_KEY=OAUTH_GITHUB_APP_SECRET=OAUTH_GITHUB_URL=OAUTH_GITHUB_VERIFY_SSL=OAUTH_GITLAB_API_KEY=OAUTH_GITLAB_APP_SECRET=OAUTH_BITBUCKET_API_KEY=OAUTH_BITBUCKET_APP_SECRET=OAUTH_SAML_ASSERTION_CONSUMER_SERVICE_URL=OAUTH_SAML_IDP_CERT_FINGERPRINT=OAUTH_SAML_IDP_SSO_TARGET_URL=OAUTH_SAML_ISSUER=OAUTH_SAML_LABEL="Our SAML Provider"OAUTH_SAML_NAME_IDENTIFIER_FORMAT=urn:oasis:names:tc:SAML:2.0:nameid-format:transientOAUTH_SAML_GROUPS_ATTRIBUTE=OAUTH_SAML_EXTERNAL_GROUPS=OAUTH_SAML_ATTRIBUTE_STATEMENTS_EMAIL=OAUTH_SAML_ATTRIBUTE_STATEMENTS_NAME=OAUTH_SAML_ATTRIBUTE_STATEMENTS_FIRST_NAME=OAUTH_SAML_ATTRIBUTE_STATEMENTS_LAST_NAME=OAUTH_CROWD_SERVER_URL=OAUTH_CROWD_APP_NAME=OAUTH_CROWD_APP_PASSWORD=OAUTH_AUTH0_CLIENT_ID=OAUTH_AUTH0_CLIENT_SECRET=OAUTH_AUTH0_DOMAIN=OAUTH_AZURE_API_KEY=OAUTH_AZURE_API_SECRET=OAUTH_AZURE_TENANT_ID=]]></content>
      <categories>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker-composer</tag>
        <tag>jenkins</tag>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用命令]]></title>
    <url>%2F2018%2F08%2F21%2F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[##常规 ###查看版本1select version(); 字符串截取12# 截取第一个字符到倒数第四的字符substring(&#123;$column&#125;,0,length(&#123;$column&#125;) - 4) ##账户管理 ###设置密码第一种直接命令设置1set password for &apos;root&apos;@&apos;localhost&apos;=password(&apos;newpasswd&apos;); 第二种修改user表1update mysql.user set password=password(&apos;newpasswd&apos;) where User=&quot;test&quot; and Host=&quot;localhost&quot;; 123update mysql.`user`set authentication_string = PASSWORD(&apos;shangelubon3446afe&apos;),password_expired = &apos;N&apos; where User = &apos;root&apos; and Host = &apos;localhost&apos;; ###添加新用户向user表中新添用户1insert into mysql.user(Host,User,Password) values(&quot;localhost&quot;,&quot;&#123;$username&#125;&quot;,password(&quot;&#123;$password&#125;&quot;)); ###删除用户同理删除user表的用户记录1delete from mysql.user where User=&apos;test&apos; and Host=&apos;localhost&apos;; ###用户授权授权用户拥有数据库的所有权限1grant all privileges on &#123;$dbname&#125;.* to &#123;$username&#125;@localhost identified by &apos;&#123;$password&#125;&apos;; 指定部分权限给用户1grant select,update on &#123;$dbname&#125;.* to &#123;$username&#125;@localhost identified by &apos;&#123;$password&#125;&apos;; grant select,update on reception.* to xpro@localhost identified by ‘yytest’;授权用户拥有所有数据库的某些权限12grant select,delete,update,create,drop on *.* to username@&quot;%&quot; identified by &quot;&#123;$password&#125;&quot;;# @&quot;%&quot; 表示对所有非本地主机授权，不包括localhost 以上授权操作都需要刷新系统权限表1flush privileges; ##常用工具（bin文件下常用命令） 数据导出1mysqldump -uroot -p123 dbname.table &gt; targetfile.sql mysql升级修复1mysql_upgrade 问题解决mysql配置文件修改为免密码登录。 vi /etc/my.cfgDisabling symbolic-links is recommended to prevent assorted security risksskip-grant-tables #添加这句话，这时候登入mysql就不需要密码symbolic-links=0 在mysql5.7版本中，不存在password字段，使用authentication_string字段. Reset mysql root password using Alter user 报错信息:ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement. 123use mysqlUPDATE mysql.user SET Password=PASSWORD(&apos;NewPassword&apos;) WHERE User=&apos;root&apos;;FLUSH PRIVILEGES;]]></content>
      <categories>
        <category>Coding</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux 下搭建SS服务器]]></title>
    <url>%2F2018%2F08%2F19%2Flinux%20%E4%B8%8B%E6%90%AD%E5%BB%BASS%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[Centos系统123wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev.shchmod +x shadowsocks-libev.sh./shadowsocks-libev.sh 2&gt;&amp;1 | tee shadowsocks-libev.log Debian/Ubuntu 系统123wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev-debian.shchmod +x shadowsocks-libev-debian.sh./shadowsocks-libev-debian.sh 2&gt;&amp;1 | tee shadowsocks-libev-debian.log 配置服务器端口：自己设定（如不设定，默认为 8989）密码：自己设定（如不设定，默认为teddysun.com）加密方式：自己设定（如不设定，默认为 aes-256-gcm） 12345678Congratulations, Shadowsocks-libev server install completed!Your Server IP :your_server_ipYour Server Port :your_server_portYour Password :your_passwordYour Encryption Method:your_encryption_method Welcome to visit:http://teddysun.com/357.htmlEnjoy it! 基本操作命令1234/etc/init.d/shadowsocks start # 启动/etc/init.d/shadowsocks stop # 关闭/etc/init.d/shadowsocks restart # 重启/etc/init.d/shadowsocks status # 查看状态 服务器加速centos教程]]></content>
      <categories>
        <category>Practice</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>翻墙</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git-ssh配合]]></title>
    <url>%2F2018%2F05%2F09%2Fgit-ssh%E9%85%8D%E5%90%88%2F</url>
    <content type="text"><![CDATA[SSH-Keys1. 本地创建密钥1234567891011121314151617181920212223242526272829ssh-keygen -t rsa -C "$(whoami)@$(hostname)-$(date)" -f ~/.ssh/filenameGenerating public/private ecdsa key pair.Enter file in which to save the key (/home/username/.ssh/id_rsa):Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /home/username/.ssh/id_rsa.Your public key has been saved in /home/username/.ssh/id_rsa.pub.The key fingerprint is:dd:15:ee:24:20:14:11:01:b8:72:a2:0f:99:4c:79:7f username@localhost-2011-12-22The key's randomart image is:+--[ECDSA 521]---+| ..oB=. . || . . . . . || . . . + || oo.o . . = ||o+.+. S . . . ||=. . E || o . || . || |+-----------------+``` &gt; 终端执行上述命令,`-t`指定加密方式，默认为dsa,`-C` 设置注释文字，`-f`指定文件路径和文件名不需要密码，直接三个回车，则生成两个文件 : 默认生成`id_rsa`私钥和`id_rsa.pub`公钥,若出现`id_rsa already exists`，可以选择`overwrite`重写文件或，用`-f`参数指定文件名### 不修改密钥对的情况下修改密码短语您可以使用 ssh-keygen 命令来修改密码短语，而无需改动密钥对。假设您要修改的密钥对使用 RSA 加密，输入以下命令即可：```bash$ ssh-keygen -f ~/.ssh/id_rsa -p 2. 管理多组密钥对配置~/.ssh/config文件添加ssh服务器信息,若有多个私钥，可以指明登陆某台服务器用哪个私钥1vi ~/.ssh/config #若没有该文件，直接新建即可 添加文件内容格式如下：12345Host host #远程服务器域名或ipHostName hostname #设置别名Port port #远程服务器端口，默认为22User user #远程服务器用户名IdentityFile ~/.ssh/id_rsa #步骤一中生成的私钥文件 将公钥复制到远程服务器上创建好密钥对之后，需要将公钥上传到远程服务器上，以便用于 SSH 密钥认证登录。公钥文件名和私钥文件名相同，只不过公钥文件带有扩展名 .pub 而私钥文件名则没有。千万不要将私钥上传，私钥应该保存在本地。 常规的方法12345678# 登录服务器，确认服务器上是否有ssh服务,若没有则安装which ssh# 确认ssh目录是否存在,没有需创建mkdir -p ~/.ssh# 将本地公钥添加到授权文件中vi ~/.ssh/authorized_keys# 重启ssh服务service sshd restart 简单的方法1$ ssh-copy-id -i [identity file] github.com 如果您的远程服务器用户名与本地的不同，需要指明用户名,如果远程服务器监听端口不是 22,也需要指明端口1$ ssh-copy-id -i [identity file] username@remote-server.org -p 221 第二种方式登陆代码托管平台，如Github,Oschina,通过profile setting-&gt;SSH keys，将id_rsa.pub的内容复制到key中，填写title标注SSH Key. 测试1$ ssh -T git@github.com 你将会看到：123The authenticity of host 'github.com (207.97.227.239)' can't be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? 选择 yes,出现下面的提示，就成功了1Hi username! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 修改remote的配置查看remote URLs123$ git remote -vorigin https://github.com/USERNAME/REPOSITORY.git (fetch)origin https://github.com/USERNAME/REPOSITORY.git (push) 设配url为ssh1$ git remote set-url origin git@github.com:USERNAME/REPOSITORY.git 也可以修改.git的下config文件，将url和pushurl的地址修改为ssh的地址 SSH agents如果您的私钥使用密码短语来加密了的话，每一次使用 SSH 密钥对进行登录的时候，您都必须输入正确的密码短语。 而 SSH agent 程序能够将您的已解密的私钥缓存起来，在需要的时候提供给您的 SSH 客户端。这样子，您就只需要将私钥加入 SSH agent 缓存的时候输入一次密码短语就可以了。这为您经常使用 SSH 连接提供了不少便利。 SSH agent 一般会设置成在登录会话的时候自动启动，并在整个会话中保持运行。有不少的 SSH agent 供您选择，我们将为您介绍几种常用的 SSH agent，您可以根据您的需要进行选择。 ssh-agentssh-agent 是 OpenSSH 自带的一个 SSH agent，它可以直接作为 SSH agent 来使用，或者作为其他 SSH agent 的后端。ssh-agent 运行时会自动 fork 它自身，然收打印出其所需的环境变量。1234$ ssh-agentSSH_AUTH_SOCK=/tmp/ssh-vEGjCM2147/agent.2147; export SSH_AUTH_SOCK;SSH_AGENT_PID=2148; export SSH_AGENT_PID;echo Agent pid 2148; 要使用这些环境变量，您需要使用 eval 命令来运行它123# start the ssh-agent in the backgroundeval "$(ssh-agent -s)"Agent pid 59566 可以将上述命令添加到 ~/.bash_profile，以便您启动 登录外壳的时候它自动运行。1$ echo 'eval $(ssh-agent)' &gt;&gt; ~/.bash_profile 如果您想要所有的用户都可以使用 ssh-agent，可以直接把上述命令加入到 /etc/profile。1$ echo 'eval $(ssh-agent)' &gt;&gt; /etc/profile ssh-agent 运行起来之后，您还需要将您的私钥加入它的缓存。1$ ssh-add ~/.ssh/id_rsa 参考资料 SSH keys (简体中文) - ArchWiki)]]></content>
      <categories>
        <category>Coding</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
</search>
