<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[维护页面配置]]></title>
    <url>%2F2019%2F02%2F20%2F%E7%BB%B4%E6%8A%A4%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[项目更新，需要将所有页面重定向到指定的维护页面,并且保证资源文件正常加载 代码示例12345678910111213141516171819202122232425262728location / &#123; set $flag 0; # 1. maintenance file exist if (-f $document_root/maintain/maintain.html) &#123; set $flag "$&#123;flag&#125;1"; &#125; # 2. ignore resources loaded by the maintenance page if ( $request_uri !~ "(/maintain/Resource/.*)$") &#123; set $flag "$&#123;flag&#125;2"; &#125; if ($flag = "01" )&#123; break; &#125; # meet condition 1,2, redirect to maintenance page if ($flag = "012" )&#123; return 503; &#125; # reset customize config ... &#125;error_page 503 @maintenance;location @maintenance &#123; rewrite ^(.*)$ /maintain/maintain.html break;&#125; 注意事项 如果存在maintain\maintain.html，就会触发指向维护页面，正常情况下注释掉set $flag &quot;${flag}1&quot;;或更改文件名。 nginx的if后必须加空格。 nginx的if判断不能用多条件判断和嵌套操作。]]></content>
      <categories>
        <category>Coding</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>maintaenance</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git-ssh配合]]></title>
    <url>%2F2018%2F05%2F09%2Fgit-ssh%E9%85%8D%E5%90%88%2F</url>
    <content type="text"><![CDATA[SSH 密钥对可以让您方便的登录到 SSH 服务器，而无需输入密码。由于您无需发送您的密码到网络中，SSH 密钥对被认为是更加安全的方式。再加上使用密码短语 (passphrase) 的使用，安全性会更上一层楼。 SSH-Keys1. 本地创建密钥1234567891011121314151617181920212223242526272829ssh-keygen -t rsa -C "$(whoami)@$(hostname)-$(date)" -f ~/.ssh/filenameGenerating public/private ecdsa key pair.Enter file in which to save the key (/home/username/.ssh/id_rsa):Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /home/username/.ssh/id_rsa.Your public key has been saved in /home/username/.ssh/id_rsa.pub.The key fingerprint is:dd:15:ee:24:20:14:11:01:b8:72:a2:0f:99:4c:79:7f username@localhost-2011-12-22The key's randomart image is:+--[ECDSA 521]---+| ..oB=. . || . . . . . || . . . + || oo.o . . = ||o+.+. S . . . ||=. . E || o . || . || |+-----------------+``` &gt; 终端执行上述命令,`-t`指定加密方式，默认为dsa,`-C` 设置注释文字，`-f`指定文件路径和文件名不需要密码，直接三个回车，则生成两个文件 : 默认生成`id_rsa`私钥和`id_rsa.pub`公钥,若出现`id_rsa already exists`，可以选择`overwrite`重写文件或，用`-f`参数指定文件名### 不修改密钥对的情况下修改密码短语您可以使用 ssh-keygen 命令来修改密码短语，而无需改动密钥对。假设您要修改的密钥对使用 RSA 加密，输入以下命令即可：```bash$ ssh-keygen -f ~/.ssh/id_rsa -p 2. 管理多组密钥对配置~/.ssh/config文件添加ssh服务器信息,若有多个私钥，可以指明登陆某台服务器用哪个私钥1vi ~/.ssh/config #若没有该文件，直接新建即可 添加文件内容格式如下：12345Host host #远程服务器域名或ipHostName hostname #设置别名Port port #远程服务器端口，默认为22User user #远程服务器用户名IdentityFile ~/.ssh/id_rsa #步骤一中生成的私钥文件 将公钥复制到远程服务器上创建好密钥对之后，需要将公钥上传到远程服务器上，以便用于 SSH 密钥认证登录。公钥文件名和私钥文件名相同，只不过公钥文件带有扩展名 .pub 而私钥文件名则没有。千万不要将私钥上传，私钥应该保存在本地。 常规的方法12345678# 登录服务器，确认服务器上是否有ssh服务,若没有则安装which ssh# 确认ssh目录是否存在,没有需创建mkdir -p ~/.ssh# 将本地公钥添加到授权文件中vi ~/.ssh/authorized_keys# 重启ssh服务service sshd restart 简单的方法1$ ssh-copy-id -i [identity file] github.com 如果您的远程服务器用户名与本地的不同，需要指明用户名,如果远程服务器监听端口不是 22,也需要指明端口1$ ssh-copy-id -i [identity file] username@remote-server.org -p 221 第二种方式登陆代码托管平台，如Github,Oschina,通过profile setting-&gt;SSH keys，将id_rsa.pub的内容复制到key中，填写title标注SSH Key. 测试1$ ssh -T git@github.com 你将会看到：123The authenticity of host 'github.com (207.97.227.239)' can't be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? 选择 yes,出现下面的提示，就成功了1Hi username! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 修改remote的配置查看remote URLs123$ git remote -vorigin https://github.com/USERNAME/REPOSITORY.git (fetch)origin https://github.com/USERNAME/REPOSITORY.git (push) 设配url为ssh1$ git remote set-url origin git@github.com:USERNAME/REPOSITORY.git 也可以修改.git的下config文件，将url和pushurl的地址修改为ssh的地址 SSH agents如果您的私钥使用密码短语来加密了的话，每一次使用 SSH 密钥对进行登录的时候，您都必须输入正确的密码短语。 而 SSH agent 程序能够将您的已解密的私钥缓存起来，在需要的时候提供给您的 SSH 客户端。这样子，您就只需要将私钥加入 SSH agent 缓存的时候输入一次密码短语就可以了。这为您经常使用 SSH 连接提供了不少便利。 SSH agent 一般会设置成在登录会话的时候自动启动，并在整个会话中保持运行。有不少的 SSH agent 供您选择，我们将为您介绍几种常用的 SSH agent，您可以根据您的需要进行选择。 ssh-agentssh-agent 是 OpenSSH 自带的一个 SSH agent，它可以直接作为 SSH agent 来使用，或者作为其他 SSH agent 的后端。ssh-agent 运行时会自动 fork 它自身，然收打印出其所需的环境变量。1234$ ssh-agentSSH_AUTH_SOCK=/tmp/ssh-vEGjCM2147/agent.2147; export SSH_AUTH_SOCK;SSH_AGENT_PID=2148; export SSH_AGENT_PID;echo Agent pid 2148; 要使用这些环境变量，您需要使用 eval 命令来运行它123# start the ssh-agent in the backgroundeval "$(ssh-agent -s)"Agent pid 59566 可以将上述命令添加到 ~/.bash_profile，以便您启动 登录外壳的时候它自动运行。1$ echo 'eval $(ssh-agent)' &gt;&gt; ~/.bash_profile 如果您想要所有的用户都可以使用 ssh-agent，可以直接把上述命令加入到 /etc/profile。1$ echo 'eval $(ssh-agent)' &gt;&gt; /etc/profile ssh-agent 运行起来之后，您还需要将您的私钥加入它的缓存。1$ ssh-add ~/.ssh/id_rsa 参考资料 SSH keys (简体中文) - ArchWiki)]]></content>
      <categories>
        <category>Coding</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
</search>
