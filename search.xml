<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[维护页面配置]]></title>
    <url>%2F2019%2F02%2F20%2F%E7%BB%B4%E6%8A%A4%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[项目更新，需要将所有页面重定向到指定的维护页面,并且保证资源文件正常加载 代码示例12345678910111213141516171819202122232425262728location / &#123; set $flag 0; # 1. maintenance file exist if (-f $document_root/maintain/maintain.html) &#123; set $flag "$&#123;flag&#125;1"; &#125; # 2. ignore resources loaded by the maintenance page if ( $request_uri !~ "(/maintain/Resource/.*)$") &#123; set $flag "$&#123;flag&#125;2"; &#125; if ($flag = "01" )&#123; break; &#125; # meet condition 1,2, redirect to maintenance page if ($flag = "012" )&#123; return 503; &#125; # reset customize config ... &#125;error_page 503 @maintenance;location @maintenance &#123; rewrite ^(.*)$ /maintain/maintain.html break;&#125; 注意事项 如果存在maintain\maintain.html，就会触发指向维护页面，正常情况下注释掉set $flag &quot;${flag}1&quot;;或更改文件名。 nginx的if后必须加空格。 nginx的if判断不能用多条件判断和嵌套操作。]]></content>
      <categories>
        <category>Coding</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>maintaenance</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PhpStorm 使用心得]]></title>
    <url>%2F2018%2F05%2F08%2FPhpStorm%20%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[常用快捷键 ⌘ + E 最近编辑的文件 ⌘ + ` 不同项目窗口切换 ⌘ + 9 查看git log ⌘ + P 查找文件 (改键) ⌘ + ⌥ + o 定位具体方法或者属性 ⌘ + ↑ 跳出navigation bar ⌘ + N 新建文件 ⌥ + ⌘ + L 代码一键美化 command + ctrl + g 多点编辑 使用FTP/SFTP功能配置 打开PhpStorm，打开一个本地项目。依次找到Tools—&gt;Deployment—&gt;Cofiguration，点击进入。 填写FTP/SFTP信息依次填入项目名称，主机地址，用户名，密码，项目的浏览器访问地址，然后点击Test connection测试是否连接成功。点击Mappings,配置项目本地地址，其他默认，注意远程地址那有个斜杠。点击OK。 查看远程项目文件依次找到Tools—&gt;Deployment—&gt;Browse Remote Host，点击进入。选择刚才创建的远程主机名称，即可查看远程文件。到此为止PhpStorm中FTP的配置工作已经完成。 常用操作 远程文件显示后面的日期点击一下右上角的菜单，选择Show Date即可。 下载/对比/上传文件]]></content>
      <categories>
        <category>Mac</category>
        <category>软件</category>
        <category>PhpStorm</category>
      </categories>
      <tags>
        <tag>ftp</tag>
        <tag>phpstorm</tag>
        <tag>application</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker笔记]]></title>
    <url>%2F2018%2F05%2F04%2FDocker%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Docker常用指令和加速器Perfect docker基本命令容器相关操作123456789docker create # 创建一个容器但是不启动它docker run # 创建并启动一个容器docker stop # 停止容器运行，发送信号SIGTERMdocker start # 启动一个停止状态的容器docker restart # 重启一个容器docker rm # 删除一个容器docker kill # 发送信号给容器，默认SIGKILLdocker attach # 连接(进入)到一个正在运行的容器docker wait # 阻塞到一个容器，直到容器停止运行 获取容器相关信息12345678docker ps # 显示状态为运行（Up）的容器docker ps -a # 显示所有容器,包括运行中（Up）的和退出的(Exited)docker inspect # 深入容器内部获取容器所有信息docker logs # 查看容器的日志(stdout/stderr)docker events # 得到docker服务器的实时的事件docker port # 显示容器的端口映射docker top # 显示容器的进程信息docker diff # 显示容器文件系统的前后变化 导出容器123docker cp # 从容器里向外拷贝文件或目录docker add # 添加文件，比cp更强大，可以添加remote server上的文件docker export # 将容器整个文件系统导出为一个tar包，不带layers、tag等信息 执行1docker exec # 在容器里执行一个命令，可以执行bash进入交互式 镜像操作123456789docker images # 显示本地所有的镜像列表docker import # 从一个tar包创建一个镜像，往往和export结合使用docker build # 使用Dockerfile创建镜像（推荐）docker commit # 从容器创建镜像docker rmi # 删除一个镜像docker load # 从一个tar包创建一个镜像，和save配合使用docker save # 将一个镜像保存为一个tar包，带layers和tag信息docker history # 显示生成一个镜像的历史命令docker tag # 为镜像起一个别名 镜像仓库(registry)操作1234docker login # 登录到一个registrydocker search # 从registry仓库搜索镜像docker pull # 从仓库下载镜像到本地docker push # 将一个镜像push到registry仓库中 开发常用指令查询命令12345# 查询list of dependent child images docker inspect --format='&#123;&#123;.Id&#125;&#125; &#123;&#123;.Parent&#125;&#125;' \ $(docker images --filter since=&#123;$image&#125; --quiet)# 查询服务ipdocker inspect -f '&#123;&#123;.Name&#125;&#125; - &#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125; &#123;&#123;end&#125;&#125;' $(docker ps -aq) 清理命令12345678910# 杀死所有正在运行的容器docker kill $(docker ps -a -q)#删除所有已经停止的容器docker rm $(docker ps -a -q)#清除没有tag的镜像docker rmi $(docker images | grep "^&lt;none&gt;" | awk '&#123;print $3&#125;')#删除所有镜像docker rmi $(docker images -q)#若出现`image is referenced in multiple repositories`,镜像id相同，无法删除，加`f`参数，强制删除docker rm -f $(docker ps -a -q) mac下进入docker内部1screen ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty docker加速器 阿里云 DaoCloud 灵雀 注册用户并且申请加速器，获得加速地址，右键点击桌面顶栏的docker图标，选择Preferences，在Daemon 标签（Docker 17.03 之前版本为 Advanced 标签）下的 Registry mirrors列表中加入加速加速镜像地址 尝试过阿里云和DaoCloud的两款加速器，感觉阿里云效果更好]]></content>
      <categories>
        <category>Coding</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
</search>
