<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[维护页面配置]]></title>
    <url>%2F2019%2F02%2F20%2F%E7%BB%B4%E6%8A%A4%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[项目更新，需要将所有页面重定向到指定的维护页面,并且保证资源文件正常加载 代码示例12345678910111213141516171819202122232425262728location / &#123; set $flag 0; # 1. maintenance file exist if (-f $document_root/maintain/maintain.html) &#123; set $flag "$&#123;flag&#125;1"; &#125; # 2. ignore resources loaded by the maintenance page if ( $request_uri !~ "(/maintain/Resource/.*)$") &#123; set $flag "$&#123;flag&#125;2"; &#125; if ($flag = "01" )&#123; break; &#125; # meet condition 1,2, redirect to maintenance page if ($flag = "012" )&#123; return 503; &#125; # reset customize config ... &#125;error_page 503 @maintenance;location @maintenance &#123; rewrite ^(.*)$ /maintain/maintain.html break;&#125; 注意事项 如果存在maintain\maintain.html，就会触发指向维护页面，正常情况下注释掉set $flag &quot;${flag}1&quot;;或更改文件名。 nginx的if后必须加空格。 nginx的if判断不能用多条件判断和嵌套操作。]]></content>
      <categories>
        <category>Coding</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>maintaenance</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP-FFmpeg]]></title>
    <url>%2F2018%2F05%2F11%2FPHP-FFmpeg%2F</url>
    <content type="text"><![CDATA[什么是FFmpeg FFmpeg是一个自由软件，可以运行音频和视频多种格式的录影、转换、流功能，包含了libavcodec ─这是一个用于多个项目中音频和视频的解码器库，以及libavformat——一个音频与视频格式转换库。这个项目最初是由Fabrice Bellard发起的，而现在是由Michael Niedermayer在进行维护。许多FFmpeg的开发者同时也是MPlayer项目的成员，FFmpeg在MPlayer项目中是被设计为服务器版本进行开发。 FFmpeg Git地址 安装ffmpegmac下安装1brew reinstall ffmpeg --with-faac --with-fdk-aac --with-ffplay --with-freetype --with-frei0r --with-libass --with-libvo-aacenc --with-libvorbis --with-libvpx --with-opencore-amr --with-openjpeg --with-opus --with-rtmpdump --with-schroedinger --with-speex --with-theora --with-tools ubuntu123sudo add-apt-repository ppa:djcj/hybridsudo apt-get updatesudo apt-get install ffmpeg ubuntu16安装 centOS 6安装1234sudo yum install epel-release -ysudo rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.rosudo rpm -Uvh http://li.nux.ro/download/nux/dextop/el6/x86_64/nux-dextop-release-0-2.el6.nux.noarch.rpmsudo yum install ffmpeg ffmpeg-devel -y Debian81vi /etc/apt/sources.list Add the following lines at the end of the file: 123456# deb-multimediadeb http://www.deb-multimedia.org jessie main non-freedeb-src http://www.deb-multimedia.org jessie main non-free# jessie-backportsdeb http://httpredir.debian.org/debian/ jessie-backports main Update the package list and install deb-multimedia keyring:123sudo apt-get updatesudo apt-get install deb-multimedia-keyringsudo apt-get update Install FFmpeg with the following command:1sudo apt-get install ffmpeg 源码安装12345678910111213141516171819202122232425262728mkdir software &amp;&amp; cd softwarecurl -O http://ffmpeg.org/releases/ffmpeg-4.1.2.tar.bz2tar -xvf ffmpeg-4.1.2.tar.bz2cd ffmpeg-4.1.2# 安装会缺少不少依赖，缺什么补什么～ apt-install ./configure --prefix=/usr \ --enable-gpl \ --enable-version3 \ --enable-nonfree \ --disable-static \ --enable-shared \ --disable-debug \ --enable-avresample \ --enable-libass \ --enable-libfdk-aac \ --enable-libfreetype \ --enable-libmp3lame \ --enable-libtheora \ --enable-libvorbis \ --enable-libvpx \ --enable-libx264 \ #--enable-libopus \ #optional --enable-libx265makesudo make install 可能会遇到以下问题 Cannot retrieve metalink for repository: epel. 1run yum --disablerepo=epel -y update ca-certificates /primary.sqlite.bz2: [Errno -1] 1run yun clean all 安装成功后测试:1ffmpeg -version 安装php-ffmpeg1composer require php-ffmpeg/php-ffmpeg 基本用法实例对象1234567$ffmpeg = FFMpeg\FFMpeg::create(array( //ffmpeg指令文件的引用，按实际情况设置，引用失败会提示Unable to load FFMpeg 'ffmpeg.binaries' =&gt; '/usr/local/Cellar/ffmpeg/3.2.4/bin/ffmpeg', 'ffprobe.binaries' =&gt; '/usr/local/Cellar/ffmpeg/3.2.4/bin/ffprobe', 'timeout' =&gt; 3600, // The timeout for the underlying process 'ffmpeg.threads' =&gt; 12, // The number of threads that FFMpeg should use)); 视频转码12345678910111213$video = $ffmpeg-&gt;open(public_path().'/upload/audio.mp4');$format = new FFMpeg\Format\Video\X264('libmp3lame', 'libx264');$format-&gt;on('progress', function ($video, $format, $percentage) &#123; echo "$percentage % transcoded";&#125;);$format -&gt;setKiloBitrate(1000) -&gt;setAudioChannels(2) -&gt;setAudioKiloBitrate(256);$video-&gt;save($format, public_path().'/upload/video.mp4'); 相关问题 Unable to load FFMpeg 先安装ffmpeg,正确引用bin文件下的命令文件 Mac环境下Encoding Failed 原因是缺少libfaac,实例化format，传libmp3lame 1$format = new FFMpeg\Format\Video\X264('libmp3lame', 'libx264'); CentOs 6 使用libfaac]]></content>
      <categories>
        <category>Coding</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>extensions</tag>
        <tag>ffmpeg</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker笔记]]></title>
    <url>%2F2018%2F05%2F04%2FDocker%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Docker常用指令和加速器Perfect docker基本命令容器相关操作123456789docker create # 创建一个容器但是不启动它docker run # 创建并启动一个容器docker stop # 停止容器运行，发送信号SIGTERMdocker start # 启动一个停止状态的容器docker restart # 重启一个容器docker rm # 删除一个容器docker kill # 发送信号给容器，默认SIGKILLdocker attach # 连接(进入)到一个正在运行的容器docker wait # 阻塞到一个容器，直到容器停止运行 获取容器相关信息12345678docker ps # 显示状态为运行（Up）的容器docker ps -a # 显示所有容器,包括运行中（Up）的和退出的(Exited)docker inspect # 深入容器内部获取容器所有信息docker logs # 查看容器的日志(stdout/stderr)docker events # 得到docker服务器的实时的事件docker port # 显示容器的端口映射docker top # 显示容器的进程信息docker diff # 显示容器文件系统的前后变化 导出容器123docker cp # 从容器里向外拷贝文件或目录docker add # 添加文件，比cp更强大，可以添加remote server上的文件docker save &#123;$containerName&#125; -o &#123;path/name&#125; # 将容器整个文件系统导出为一个tar包，不带layers、tag等信息 执行1docker exec # 在容器里执行一个命令，可以执行bash进入交互式 镜像操作123456789docker images # 显示本地所有的镜像列表docker import # 从一个tar包创建一个镜像，往往和export结合使用docker build # 使用Dockerfile创建镜像（推荐）docker commit # 从容器创建镜像docker rmi # 删除一个镜像docker load # 从一个tar包创建一个镜像，和save配合使用docker save # 将一个镜像保存为一个tar包，带layers和tag信息docker history # 显示生成一个镜像的历史命令docker tag # 为镜像起一个别名 镜像仓库(registry)操作1234docker login # 登录到一个registrydocker search # 从registry仓库搜索镜像docker pull # 从仓库下载镜像到本地docker push # 将一个镜像push到registry仓库中 开发常用指令查询命令123456# 查询list of dependent child images docker inspect --format='&#123;&#123;.Id&#125;&#125; &#123;&#123;.Parent&#125;&#125;' $(docker images --filter since=&#123;$imageName&#125; --quiet)# 示例docker inspect --format='&#123;&#123;.Id&#125;&#125; &#123;&#123;.Parent&#125;&#125;' $(docker images --filter since=77a7a --quiet)# 查询服务ipdocker inspect -f '&#123;&#123;.Name&#125;&#125; - &#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125; &#123;&#123;end&#125;&#125;' $(docker ps -aq) 清理命令12345678910# 杀死所有正在运行的容器docker kill $(docker ps -a -q)#删除所有已经停止的容器docker rm $(docker ps -a -q)#清除没有tag的镜像docker rmi $(docker images | grep "^&lt;none&gt;" | awk '&#123;print $3&#125;')#删除所有镜像docker rmi $(docker images -q)#若出现`image is referenced in multiple repositories`,镜像id相同，无法删除，加`f`参数，强制删除docker rm -f $(docker ps -a -q) dockerfile打包及使用123456#构建镜像docker build -t php:v7.3 .# 导出镜像docker save php:v7.3 -o ~/Desktop/php_7.3.tar# 导入镜像docker load --input ~/Desktop/php_7.3.tar mac下进入docker内部1screen ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty docker加速器 阿里云 DaoCloud 灵雀 注册用户并且申请加速器，获得加速地址，右键点击桌面顶栏的docker图标，选择Preferences，在Daemon 标签（Docker 17.03 之前版本为 Advanced 标签）下的 Registry mirrors列表中加入加速加速镜像地址 在Docker Engine下将以下配置添加到json配置中123&quot;registry-mirrors&quot;: [ &quot;https://dfqt9xi4.mirror.aliyuncs.com&quot;] 尝试过阿里云和DaoCloud的两款加速器，感觉阿里云效果更好 加速配置参考]]></content>
      <categories>
        <category>Coding</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git工作流]]></title>
    <url>%2F2018%2F05%2F03%2FGit%E5%B7%A5%E4%BD%9C%E6%B5%81%2F</url>
    <content type="text"><![CDATA[GitFlow是Vincent Driessen提出的A Successful Git Branching Model流程图翻译如下 分支介绍主要分支:永久分支,生命周期与项目同步 master:永远处在production-ready状态,保存已发布的版本 develop:当前最新的工作状态 辅助分支: 临时性分支 feature:开发新功能或较大的功能改动，一般基于develop分支，完成后merge回develop分支 realease:准备发布版本，只完善当前版本，不加新功能。基于develop分支，完成后merge回develop和master(标记tag) hotfix:有紧急bug需修复上线，赶不及下次release。基于最新master，完成后merge回develop和master(标记) 分支图解初始分支所有在master分支上的commit 应该tag feature分支分支命名为feature/*,feature分支完成后，必须合并回develop, 合并完分支后一般会删点这个Feature分支，但是我们也可以保留 release分支分支命名为release/*,release分支基于develop分支创建，创建release分支后，可以进行测试，修改bug等。同时，其它开发人员可以基于开发新的Feature hotfix分支名hotfix/*,修复线上出现的紧急bug Git Flow代码示例创建develop12git branch developgit push -u origin develop 开始新feature开发12345678git checkout -b some-feature develop# Optionally, push branch to origin:git push -u origin some-feature # 做一些改动 git statusgit add some-filegit commit 完成feature123456789git pull origin developgit checkout developgit merge --no-ff some-featuregit push origin developgit branch -d some-feature# If you pushed branch to origin:git push origin --delete some-feature 开始relase1234git checkout -b release-0.1.0 develop# Optional: Bump version number, commit# Prepare release, commit 完成release123456789101112131415git checkout mastergit merge --no-ff release-0.1.0git pushgit checkout developgit merge --no-ff release-0.1.0git pushgit branch -d release-0.1.0# If you pushed branch to origin:git push origin --delete release-0.1.0 git tag -a v0.1.0 mastergit push --tags 开始hotfix1git checkout -b hotfix-0.1.1 master 完成hotfix123456789101112git checkout mastergit merge --no-ff hotfix-0.1.1git pushgit checkout developgit merge --no-ff hotfix-0.1.1git pushgit branch -d hotfix-0.1.1git tag -a v0.1.1 mastergit push --tags]]></content>
      <categories>
        <category>Coding</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
